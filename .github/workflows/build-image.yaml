name: Build Container Image

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ticketing
  ECS_TASK_DEFINITION: task_def:2
  CONTAINER_NAME: web
  ECS_SERVICE: task-service
  ECS_CLUSTER: ticketing-compose-infra-cluster

jobs:
  build-and-push:
    name: Build container image and push it to ECR.
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get latest version from ECR
        id: get-latest-version
        run: |
          CURRENT_VERSION=$(aws ecr describe-images --repository-name ticketing --query 'imageDetails[].imageTags[]' --output json | grep "^\"v" | sort -rV | head -n 1 | sed 's/"//g')
          echo "::set-output name=current_version::$CURRENT_VERSION"

      - name: Increment version
        id: increment-version
        run: |
          OLD_VERSION=${{ steps.get-latest-version.outputs.current_version }}
          IFS='.' read -r -a VERSION_PARTS <<< "$OLD_VERSION"
          NEW_PATCH=$((VERSION_PARTS[2] + 1)) # Assuming the version format is x.y.z
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH"
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          NEW_VERSION: ${{ steps.increment-version.outputs.new_version }}
          BUILD_TAG: "latest"
        run: |
          # Docker 컨테이너 빌드 및
          # ECR로 푸시하여
          # ECS에 배포할 수 있도록 합니다.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_TAG

          # ECR에 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NEW_VERSION
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BUILD_TAG

      # - name: Download Task Definition Template
      #   run: |
      #     aws ecs describe-task-definition \
      #       --task-definition ${{ env.ECS_TASK_DEFINITION}} \
      #       --query taskDefinition \
      #       > task-definition.json

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: "829235619109.dkr.ecr.ap-northeast-2.amazonaws.com/ticketing:50f1f813888be2bf3b965963c11e1023e20c061c"

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
